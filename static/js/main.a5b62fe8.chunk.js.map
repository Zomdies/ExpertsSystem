{"version":3,"sources":["Image/BirusaWM-ME610_04.jpg","Image/CANDY DCS4 1051D1_2-07.jpg","Panels/Page.tsx","Panels/Result.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Page","title","index","setWeight","className","onClick","Result","weights","AnwserArray","Name","Image","Awser0","Awser1","Awser2","Awser3","Awser4","useState","setIndex","useEffect","props","maxI","max","i","length","findMax","src","window","location","reload","App","questionsArray","questionsWeith","awnser","startApp","setStartApp","bind","anwser","prev","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5b62fe8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BirusaWM-ME610_04.9b78fb6a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/CANDY DCS4 1051D1_2-07.9123a06f.jpg\";","import React from 'react'\r\n\r\ntype PageProps = {\r\n    title: string,\r\n    index: number,\r\n    setWeight: any\r\n\r\n}\r\n\r\nconst Page: React.FC<PageProps> = ({ title, index, setWeight }) => {\r\n    return (\r\n        <div className=\"Welcome\">\r\n            <p>{title}</p>\r\n            <div className=\"Buttons__Block\">\r\n                <button onClick={() => setWeight(index, true)} >Да</button>\r\n                <button onClick={() => setWeight(index, false)}>Нет</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport Awser0 from '../Image/BirusaWM-ME610_04.jpg'\r\nimport Awser1 from '../Image/CANDY DCS4 1051D1_2-07.jpg'\r\nimport Awser2 from '../Image/BirusaWM-ME610_04.jpg'\r\nimport Awser3 from '../Image/BirusaWM-ME610_04.jpg'\r\nimport Awser4 from '../Image/BirusaWM-ME610_04.jpg'\r\n\r\ntype ResultProps = {\r\n    weights: Array<number>\r\n}\r\ntype Awnser = {\r\n    Name: string,\r\n    Image: string\r\n}\r\n\r\nconst Result: React.FC<ResultProps> = ({ weights }) => {\r\n\r\n    const AnwserArray: Array<Awnser> = [\r\n        { Name: \"Бирюса WM-ME610/04\", Image: Awser0 },\r\n        { Name: \"CANDY DCS4 1051D1/2-07\", Image: Awser1 },\r\n        { Name: \"BEKO RGS 54P1 BWW\", Image: Awser2 },\r\n        { Name: \"SAMSUNG WF60F1R0F2W\", Image: Awser3 },\r\n        { Name: \"ATLANT 70У1010-00\", Image: Awser4 },\r\n\r\n    ];\r\n    const [index, setIndex] = useState(-1);\r\n    const findMax = (props?: any): number => {\r\n        let maxI: number = 0;\r\n        let max: number = weights[0];\r\n        for (var i = 1; i < weights.length; ++i) {\r\n            if (weights[i] >= max) {\r\n                max = weights[i];\r\n                maxI = i;\r\n            }\r\n        }\r\n        setIndex(maxI);\r\n        return maxI;\r\n    }\r\n    useEffect(() => {\r\n        findMax();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"Welcome\">\r\n            {index !== -1 &&\r\n                <>\r\n                    <p>Вам больше всего подходит</p>\r\n                    <p>{AnwserArray[index].Name}</p>\r\n                    <img src={AnwserArray[index].Image} />\r\n                    <button onClick={() => window.location.reload()}>Пройти ещё раз</button>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Page from './Panels/Page';\nimport Result from './Panels/Result'\n\ntype AppProps = {\n  weights : Array<number>\n}\n\nconst App: React.FunctionComponent<AppProps> = ({weights}) => {\n\n  const questionsArray: Array<string> = [\n    \"Вам нужна стиральная машина с закрузкой 5кг ?\",\n    \"Вам нужна стиральная машина с закрузкой более 5кг ?\",\n    \"Вам нужна стиральная машина с защитой от протечек ?\",\n    \"Вам нужна стиральная машина с интенторным двигателем ?\",\n    \"Вам нужна стиральная машина с кол-вом программ > 15 ?\",\n    \"Вам нужна стиральная машина с классом А+ ?\",\n    \"Вам нужна стиральная машина с классом А ?\",\n    \"Вам нужна стиральная машина с более 800 оборотами ?\",\n    \"Вам нужна стиральная машина с более 1200 оборотами ?\",\n    \"Вам нужна стиральная машина сделаная в России ?\",\n    \"Вам нужна стиральная машина сделаная в Китае ?\",\n    \"Вам нужна стиральная машина сделаная в Японии ?\",\n    \"Вам нужна стиральная машина стоимостью до 15к ?\",\n    \"Вам нужна стиральная машина стоимостью от 15к до 30к ?\",\n  ];\n  const questionsWeith: Array<number> = [0.2, 0.2, 0.5, 0.5, 0.1, 0.3, 0.2, 0.2, 0.3, 0.1, 0.1, 0.1, 0.25, 0.5];\n  const awnser: Array<Array<boolean>> = [\n    [false, true, false, false, true, true, false, true, true, false, false, true, false, false],\n    [true, false, false, false, true, true, false, true, false, true, false, false, true, false],\n    [true, false, false, false, true, false, true, false, false, true, false, true, false, false],\n    [false, true, true, true, false, true, false, true, false, false, true, false, true, true],\n    [false, true, true, true, true, false, true, false, true, false, false, false, true, false],\n  ]\n  const [startApp, setStartApp] = useState(false);\n  const [index, setIndex] = useState(0);\n\n  const setWeight = (index: number, anwser: boolean): void => {\n\n    for (var i = 0; i < weights.length; ++i) {\n      if (awnser[i][index] === anwser) weights[i] = weights[i] + questionsWeith[index];\n    }\n    if (index <= questionsArray.length - 1) {\n      setIndex(prev => {\n        prev++;\n        return prev\n      })\n    }\n  }\n  return (\n    <div className=\"App\">\n      {!startApp && <div className=\"Welcome\">\n        {/* <a>Welcome, Click to find Washer</a> */}\n        <a>Добро пожаловать, начать подбор стиральной машыны</a>\n        <button onClick={setStartApp.bind(null, true)} >Start</button>\n      </div>\n      }\n      {startApp && index !== questionsArray.length && <Page title={questionsArray[index]} index={index} setWeight={setWeight} />}\n      {index === questionsArray.length &&\n        <Result weights={weights} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar weights: Array<number> = [0, 0, 0, 0, 0];\n\nReactDOM.render(\n    <App weights={weights} />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}